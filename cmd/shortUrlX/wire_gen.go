// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/bitstormhub/bitstorm/shortUrlX/internal/biz"
	"github.com/bitstormhub/bitstorm/shortUrlX/internal/conf"
	"github.com/bitstormhub/bitstorm/shortUrlX/internal/data"
	"github.com/bitstormhub/bitstorm/shortUrlX/internal/interfaces"
	"github.com/bitstormhub/bitstorm/shortUrlX/internal/server"
	"github.com/bitstormhub/bitstorm/shortUrlX/internal/service"
	"github.com/go-kratos/kratos/v2"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp
//
//	@Author <a href="https://bitoffer.cn">狂飙训练营</a>
//	@Description: wireApp init kratos application.
//	@param *conf.Server
//	@param *conf.Data
//	@return *kratos.App
//	@return func()
//	@return error
func wireApp(confServer *conf.Server, confData *conf.Data) (*kratos.App, func(), error) {
	db := data.NewDatabase(confData)
	client := data.NewCache(confData)
	dataData, err := data.NewData(db, client)
	if err != nil {
		return nil, nil, err
	}
	urlMapRepo := data.NewUrlMapRepo(dataData)
	transaction := data.NewTransaction(dataData)
	urlMapUseCase := biz.NewUrlMapUseCase(urlMapRepo, transaction)
	shortUrlXService := service.NewShortUrlXService(urlMapUseCase)
	grpcServer := server.NewGRPCServer(confServer, shortUrlXService)
	handler := interfaces.NewHandler(shortUrlXService)
	httpServer := server.NewHTTPServer(confServer, handler)
	app := newApp(grpcServer, httpServer)
	return app, func() {
	}, nil
}
